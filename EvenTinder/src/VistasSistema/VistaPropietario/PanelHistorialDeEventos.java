/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VistasSistema.VistaPropietario;

import ModuloGestionEventos.Evento;
import ModuloGestionPropiedades.Propiedad;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author xebae
 */
public class PanelHistorialDeEventos extends javax.swing.JPanel {

    /**
     * Creates new form PanelHistorialDeEventos
     */
    
    private VentanaPrincipalPropietario papa;
    private ArrayList<Evento> eventos;
    private ArrayList<Propiedad> propiedades;
    private DefaultListModel modeloLista;
    
    public PanelHistorialDeEventos(VentanaPrincipalPropietario papa) throws SQLException {
        this.papa=papa;
        initComponents();
        modeloLista= new DefaultListModel();
        lista.setModel(modeloLista);
        actualizarMenuOpciones();
        actualizarMenuOpciones2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel18 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lista = new javax.swing.JList<>();
        jLabel20 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        listaPropiedades = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        opciones = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jLabel18.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel18.setText("Men√∫ historial de eventos");

        jPanel1.setBackground(new java.awt.Color(232, 232, 232));

        lista.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(lista);

        jLabel20.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel20.setText("Lista de eventos");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/VistasSistema/Imagenes/IconoEvenTinder.png"))); // NOI18N

        jPanel2.setBackground(new java.awt.Color(232, 232, 232));

        listaPropiedades.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        listaPropiedades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaPropiedadesActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel19.setText("2. Elija una propiedad");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(listaPropiedades, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addGap(18, 18, 18)
                .addComponent(listaPropiedades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(232, 232, 232));

        jLabel21.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel21.setText("1. Elija entre finalizados o publicados");

        opciones.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        opciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addGap(0, 160, Short.MAX_VALUE))
                    .addComponent(opciones, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addGap(18, 18, 18)
                .addComponent(opciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel4)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel18)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel18)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(103, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void listaPropiedadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaPropiedadesActionPerformed
        // TODO add your handling code here:
        if(this.opciones.getSelectedIndex()<=0){
            return;
        }
        if(this.listaPropiedades.getSelectedIndex()==0){
            this.actualizarListaEventosTodos();
            return;
        }
        try {
            this.actualizarListaEventosPorPropiedad(this.propiedades.get(this.listaPropiedades.getSelectedIndex()-1).getId());
        } catch (SQLException ex) {
            Logger.getLogger(PanelHistorialDeEventos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_listaPropiedadesActionPerformed

    private void opcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionesActionPerformed
        // TODO add your handling code here:
        if(this.opciones.getSelectedIndex()<=0){
            return;
        }
        if(this.listaPropiedades.getSelectedIndex()==0){
            this.actualizarListaEventosTodos();
            return;
        }
        try {
            this.actualizarListaEventosPorPropiedad(this.propiedades.get(this.listaPropiedades.getSelectedIndex()-1).getId());
        } catch (SQLException ex) {
            Logger.getLogger(PanelHistorialDeEventos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_opcionesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lista;
    private javax.swing.JComboBox<String> listaPropiedades;
    private javax.swing.JComboBox<String> opciones;
    // End of variables declaration//GEN-END:variables

    
    public void actualizarMenuOpciones2() throws SQLException{
        this.propiedades = papa.getControladorPropietario().mostrarInformacionDePropiedadesDeUnPropietario();
        this.opciones.removeAllItems();
        this.opciones.addItem("");
        this.opciones.addItem("Publicados");
        this.opciones.addItem("Finalizados");
        this.repaint();
        this.revalidate();
    }
    
    public void actualizarMenuOpciones() throws SQLException{
        this.propiedades = papa.getControladorPropietario().mostrarInformacionDePropiedadesDeUnPropietario();
        this.listaPropiedades.removeAllItems();
        this.listaPropiedades.addItem("Todas las propiedades");
        for(int i=0; i<this.propiedades.size(); i++){
            this.listaPropiedades.addItem(this.propiedades.get(i).getNombre());
        }
        this.repaint();
        this.revalidate();
    }
    
    //Aca abajo van a estar los metodos que se tienen que hacer 
    private void actualizarListaEventosTodos(){
        if(this.opciones.getSelectedIndex()==1){
            eventos = papa.getControladorPropietario().obtenerInformacionDeEventosActuales();
        }else{
            eventos = papa.getControladorPropietario().obtenerInformacionDeEventosFinalizados();
        }
        this.modeloLista=new DefaultListModel();
        if(this.eventos!=null){
            for(int i=0; i<this.eventos.size(); i++){
                this.modeloLista.addElement("Nombre: " + eventos.get(i).getNombre() + "   Fecha inicio: " + eventos.get(i).getFechaDeInicio()+ "   Fecha termino: " + eventos.get(i).getFechaDeTermino());
            }
        }
        this.lista.setModel(this.modeloLista);
        this.repaint();
        this.revalidate();
    }
    
    
    //Aca abajo van a estar los metodos que se tienen que hacer 
    private void actualizarListaEventosPorPropiedad(int id) throws SQLException{
        if(this.opciones.getSelectedIndex()==1){
            eventos = papa.getControladorPropietario().obtenerInformacionDeEventosActuales();
        }else{
            eventos = papa.getControladorPropietario().obtenerInformacionDeEventosFinalizados();
        }
        this.propiedades = papa.getControladorPropietario().mostrarInformacionDePropiedadesDeUnPropietario();
        this.modeloLista=new DefaultListModel();
        if(this.eventos!=null && this.propiedades!=null){
            for(int i=0; i<this.eventos.size(); i++){
                for(int j=0; j<this.propiedades.size(); j++){
                    if(this.eventos.get(i).getIdPropiedad()==id){
                        this.modeloLista.addElement("nombre: " + eventos.get(i).getNombre() + "   fecha inicio: " + eventos.get(i).getFechaDeInicio()+ "   fecha termino: " + eventos.get(i).getFechaDeTermino());
                        break;
                    }
                }
            }
        }
        this.lista.setModel(this.modeloLista);
        this.repaint();
        this.revalidate();
    }

}
